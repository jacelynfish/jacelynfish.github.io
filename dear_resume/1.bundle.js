webpackJsonp([1],{

/***/ 27:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\n/**\n * covert canvas to image\n * and save the image file\n */\n\nexports.default = function () {\n\n\t// check if support sth.\n\tvar $support = function () {\n\t\tvar canvas = document.createElement('canvas'),\n\t\t    ctx = canvas.getContext('2d');\n\n\t\treturn {\n\t\t\tcanvas: !!ctx,\n\t\t\timageData: !!ctx.getImageData,\n\t\t\tdataURL: !!canvas.toDataURL,\n\t\t\tbtoa: !!window.btoa\n\t\t};\n\t}();\n\n\tvar downloadMime = 'image/octet-stream';\n\n\tfunction scaleCanvas(canvas, width, height) {\n\t\tvar w = canvas.width,\n\t\t    h = canvas.height;\n\t\tif (width == undefined) {\n\t\t\twidth = w;\n\t\t}\n\t\tif (height == undefined) {\n\t\t\theight = h;\n\t\t}\n\n\t\tvar retCanvas = document.createElement('canvas');\n\t\tvar retCtx = retCanvas.getContext('2d');\n\t\tretCanvas.width = width;\n\t\tretCanvas.height = height;\n\t\tretCtx.drawImage(canvas, 0, 0, w, h, 0, 0, width, height);\n\t\treturn retCanvas;\n\t}\n\n\tfunction getDataURL(canvas, type, width, height) {\n\t\tcanvas = scaleCanvas(canvas, width, height);\n\t\treturn canvas.toDataURL(type);\n\t}\n\n\tfunction saveFile(strData) {\n\t\tdocument.location.href = strData;\n\t}\n\n\tfunction genImage(strData) {\n\t\tvar img = document.createElement('img');\n\t\timg.src = strData;\n\t\treturn img;\n\t}\n\tfunction fixType(type) {\n\t\ttype = type.toLowerCase().replace(/jpg/i, 'jpeg');\n\t\tvar r = type.match(/png|jpeg|bmp|gif/)[0];\n\t\treturn 'image/' + r;\n\t}\n\tfunction encodeData(data) {\n\t\tif (!window.btoa) {\n\t\t\tthrow 'btoa undefined';\n\t\t}\n\t\tvar str = '';\n\t\tif (typeof data == 'string') {\n\t\t\tstr = data;\n\t\t} else {\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tstr += String.fromCharCode(data[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn btoa(str);\n\t}\n\tfunction getImageData(canvas) {\n\t\tvar w = canvas.width,\n\t\t    h = canvas.height;\n\t\treturn canvas.getContext('2d').getImageData(0, 0, w, h);\n\t}\n\tfunction makeURI(strData, type) {\n\t\treturn 'data:' + type + ';base64,' + strData;\n\t}\n\n\t/**\n  * create bitmap image\n  * 按照规则生成图片响应头和响应体\n  */\n\tvar genBitmapImage = function genBitmapImage(oData) {\n\n\t\t//\n\t\t// BITMAPFILEHEADER: http://msdn.microsoft.com/en-us/library/windows/desktop/dd183374(v=vs.85).aspx\n\t\t// BITMAPINFOHEADER: http://msdn.microsoft.com/en-us/library/dd183376.aspx\n\t\t//\n\n\t\tvar biWidth = oData.width;\n\t\tvar biHeight = oData.height;\n\t\tvar biSizeImage = biWidth * biHeight * 3;\n\t\tvar bfSize = biSizeImage + 54; // total header size = 54 bytes\n\n\t\t//\n\t\t//  typedef struct tagBITMAPFILEHEADER {\n\t\t//  \tWORD bfType;\n\t\t//  \tDWORD bfSize;\n\t\t//  \tWORD bfReserved1;\n\t\t//  \tWORD bfReserved2;\n\t\t//  \tDWORD bfOffBits;\n\t\t//  } BITMAPFILEHEADER;\n\t\t//\n\t\tvar BITMAPFILEHEADER = [\n\t\t// WORD bfType -- The file type signature; must be \"BM\"\n\t\t0x42, 0x4D,\n\t\t// DWORD bfSize -- The size, in bytes, of the bitmap file\n\t\tbfSize & 0xff, bfSize >> 8 & 0xff, bfSize >> 16 & 0xff, bfSize >> 24 & 0xff,\n\t\t// WORD bfReserved1 -- Reserved; must be zero\n\t\t0, 0,\n\t\t// WORD bfReserved2 -- Reserved; must be zero\n\t\t0, 0,\n\t\t// DWORD bfOffBits -- The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.\n\t\t54, 0, 0, 0];\n\n\t\t//\n\t\t//  typedef struct tagBITMAPINFOHEADER {\n\t\t//  \tDWORD biSize;\n\t\t//  \tLONG  biWidth;\n\t\t//  \tLONG  biHeight;\n\t\t//  \tWORD  biPlanes;\n\t\t//  \tWORD  biBitCount;\n\t\t//  \tDWORD biCompression;\n\t\t//  \tDWORD biSizeImage;\n\t\t//  \tLONG  biXPelsPerMeter;\n\t\t//  \tLONG  biYPelsPerMeter;\n\t\t//  \tDWORD biClrUsed;\n\t\t//  \tDWORD biClrImportant;\n\t\t//  } BITMAPINFOHEADER, *PBITMAPINFOHEADER;\n\t\t//\n\t\tvar BITMAPINFOHEADER = [\n\t\t// DWORD biSize -- The number of bytes required by the structure\n\t\t40, 0, 0, 0,\n\t\t// LONG biWidth -- The width of the bitmap, in pixels\n\t\tbiWidth & 0xff, biWidth >> 8 & 0xff, biWidth >> 16 & 0xff, biWidth >> 24 & 0xff,\n\t\t// LONG biHeight -- The height of the bitmap, in pixels\n\t\tbiHeight & 0xff, biHeight >> 8 & 0xff, biHeight >> 16 & 0xff, biHeight >> 24 & 0xff,\n\t\t// WORD biPlanes -- The number of planes for the target device. This value must be set to 1\n\t\t1, 0,\n\t\t// WORD biBitCount -- The number of bits-per-pixel, 24 bits-per-pixel -- the bitmap\n\t\t// has a maximum of 2^24 colors (16777216, Truecolor)\n\t\t24, 0,\n\t\t// DWORD biCompression -- The type of compression, BI_RGB (code 0) -- uncompressed\n\t\t0, 0, 0, 0,\n\t\t// DWORD biSizeImage -- The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps\n\t\tbiSizeImage & 0xff, biSizeImage >> 8 & 0xff, biSizeImage >> 16 & 0xff, biSizeImage >> 24 & 0xff,\n\t\t// LONG biXPelsPerMeter, unused\n\t\t0, 0, 0, 0,\n\t\t// LONG biYPelsPerMeter, unused\n\t\t0, 0, 0, 0,\n\t\t// DWORD biClrUsed, the number of color indexes of palette, unused\n\t\t0, 0, 0, 0,\n\t\t// DWORD biClrImportant, unused\n\t\t0, 0, 0, 0];\n\n\t\tvar iPadding = (4 - biWidth * 3 % 4) % 4;\n\n\t\tvar aImgData = oData.data;\n\n\t\tvar strPixelData = '';\n\t\tvar biWidth4 = biWidth << 2;\n\t\tvar y = biHeight;\n\t\tvar fromCharCode = String.fromCharCode;\n\n\t\tdo {\n\t\t\tvar iOffsetY = biWidth4 * (y - 1);\n\t\t\tvar strPixelRow = '';\n\t\t\tfor (var x = 0; x < biWidth; x++) {\n\t\t\t\tvar iOffsetX = x << 2;\n\t\t\t\tstrPixelRow += fromCharCode(aImgData[iOffsetY + iOffsetX + 2]) + fromCharCode(aImgData[iOffsetY + iOffsetX + 1]) + fromCharCode(aImgData[iOffsetY + iOffsetX]);\n\t\t\t}\n\n\t\t\tfor (var c = 0; c < iPadding; c++) {\n\t\t\t\tstrPixelRow += String.fromCharCode(0);\n\t\t\t}\n\n\t\t\tstrPixelData += strPixelRow;\n\t\t} while (--y);\n\n\t\tvar strEncoded = encodeData(BITMAPFILEHEADER.concat(BITMAPINFOHEADER)) + encodeData(strPixelData);\n\n\t\treturn strEncoded;\n\t};\n\n\t/**\n  * saveAsImage\n  * @param canvasElement\n  * @param {String} image type\n  * @param {Number} [optional] png width\n  * @param {Number} [optional] png height\n  */\n\tvar saveAsImage = function saveAsImage(canvas, width, height, type) {\n\t\tif ($support.canvas && $support.dataURL) {\n\t\t\tif (typeof canvas == \"string\") {\n\t\t\t\tcanvas = document.getElementById(canvas);\n\t\t\t}\n\t\t\tif (type == undefined) {\n\t\t\t\ttype = 'png';\n\t\t\t}\n\t\t\ttype = fixType(type);\n\t\t\tif (/bmp/.test(type)) {\n\t\t\t\tvar data = getImageData(scaleCanvas(canvas, width, height));\n\t\t\t\tvar strData = genBitmapImage(data);\n\t\t\t\tsaveFile(makeURI(strData, downloadMime));\n\t\t\t} else {\n\t\t\t\tvar strData = getDataURL(canvas, type, width, height);\n\t\t\t\tsaveFile(strData.replace(type, downloadMime));\n\t\t\t}\n\t\t}\n\t};\n\n\tvar convertToImage = function convertToImage(canvas, width, height, type) {\n\t\tif ($support.canvas && $support.dataURL) {\n\t\t\tif (typeof canvas == \"string\") {\n\t\t\t\tcanvas = document.getElementById(canvas);\n\t\t\t}\n\t\t\tif (type == undefined) {\n\t\t\t\ttype = 'png';\n\t\t\t}\n\t\t\ttype = fixType(type);\n\n\t\t\tif (/bmp/.test(type)) {\n\t\t\t\tvar data = getImageData(scaleCanvas(canvas, width, height));\n\t\t\t\tvar strData = genBitmapImage(data);\n\t\t\t\treturn genImage(makeURI(strData, 'image/bmp'));\n\t\t\t} else {\n\t\t\t\tvar strData = getDataURL(canvas, type, width, height);\n\t\t\t\treturn genImage(strData);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn {\n\t\tsaveAsImage: saveAsImage,\n\t\tsaveAsPNG: function saveAsPNG(canvas, width, height) {\n\t\t\treturn saveAsImage(canvas, width, height, 'png');\n\t\t},\n\t\tsaveAsJPEG: function saveAsJPEG(canvas, width, height) {\n\t\t\treturn saveAsImage(canvas, width, height, 'jpeg');\n\t\t},\n\t\tsaveAsGIF: function saveAsGIF(canvas, width, height) {\n\t\t\treturn saveAsImage(canvas, width, height, 'gif');\n\t\t},\n\t\tsaveAsBMP: function saveAsBMP(canvas, width, height) {\n\t\t\treturn saveAsImage(canvas, width, height, 'bmp');\n\t\t},\n\n\t\tconvertToImage: convertToImage,\n\t\tconvertToPNG: function convertToPNG(canvas, width, height) {\n\t\t\treturn convertToImage(canvas, width, height, 'png');\n\t\t},\n\t\tconvertToJPEG: function convertToJPEG(canvas, width, height) {\n\t\t\treturn convertToImage(canvas, width, height, 'jpeg');\n\t\t},\n\t\tconvertToGIF: function convertToGIF(canvas, width, height) {\n\t\t\treturn convertToImage(canvas, width, height, 'gif');\n\t\t},\n\t\tconvertToBMP: function convertToBMP(canvas, width, height) {\n\t\t\treturn convertToImage(canvas, width, height, 'bmp');\n\t\t}\n\t};\n}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

});